{"version":3,"sources":["Components/Canvas1.js","App.js","index.js"],"names":["Canvas","_useState","useState","_useState2","Object","slicedToArray","storeImgData","_useState3","_useState4","storeImgData1","_useState5","_useState6","brushColor","setBrushColor","_useState7","_useState8","brushRadius","setBrushRadius","canvasDetails","useRef","color","socketUrl","lineWidth","current","useEffect","socket","io","connect","console","log","on","data","image","Image","context","document","getElementById","getContext","src","addEventListener","drawImage","mouseMoveHandler","e","type","event","touches","findxy","mouseDownHandler","mouseUpHandler","prevX","currX","prevY","currY","flag","canvas","height","window","innerHeight","width","innerWidth","draw","beginPath","moveTo","lineTo","strokeStyle","lineCap","lineJoin","stroke","closePath","waiting","base64EncodedUrl","toDataURL","push","emit","setTimeout","onSave","res","clientX","offsetLeft","clientY","offsetTop","passive","react_default","a","createElement","Fragment","className","defaultValue","onChange","newColor","target","value","min","max","newBrushSize","parseInt","id","onClick","index_esm","size","globalCompositeOperation","clearRect","clear","ai_index_esm","App","Components_Canvas1","ReactDOM","createRoot","render","src_App"],"mappings":"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","file":"static/js/main.43bbf00e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './Canvas1.css';\r\nimport { BsEraserFill } from \"react-icons/bs\";\r\nimport { BsFillPencilFill } from \"react-icons/bs\";\r\nimport { AiOutlineClear } from \"react-icons/ai\";\r\n\r\nconst Canvas = () => {\r\n    const [storeImgData, setStoreImgData] = useState(['']);\r\n    const [storeImgData1, setStoreImgData1] = useState(['']);\r\n    const [brushColor, setBrushColor] = useState(\"white\");\r\n    const [brushRadius, setBrushRadius] = useState(1);\r\n    const { current: canvasDetails } = useRef({ color: 'white', socketUrl: '/', lineWidth: 1 });\r\n \r\n\r\n    const changeColor = (newColor) => {\r\n        setBrushColor(newColor);\r\n        canvasDetails.color = newColor;\r\n    }\r\n    const changeBrushSize = (newBrushSize) => {\r\n         setBrushRadius(newBrushSize);\r\n         canvasDetails.lineWidth = brushRadius;\r\n    }\r\n    const eraser = () => {\r\n        canvasDetails.lineWidth = 10;\r\n        canvasDetails.color = \"black\";\r\n    }\r\n    const pen = () => {\r\n        canvasDetails.lineWidth = brushRadius;\r\n        canvasDetails.color = brushColor;\r\n        const canvas = document.getElementById('canvas');\r\n        const context = canvas.getContext('2d');\r\n        context.globalCompositeOperation = 'source-over';\r\n    }\r\n    const clear = () => {\r\n       const canvas = document.getElementById(\"canvas\");\r\n       const context = canvas.getContext(\"2d\");\r\n       context.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        canvasDetails.socketUrl = 'https://lets-collab.onrender.com';\r\n        canvasDetails.socket = io.connect(canvasDetails.socketUrl, () => {\r\n        })\r\n\r\n        console.log(canvasDetails);\r\n\r\n        canvasDetails.socket.on('image-data', (data) => {\r\n            const image = new Image()\r\n            const canvas = document.getElementById('canvas');\r\n            const context = canvas.getContext('2d');\r\n            image.src = data;\r\n            image.addEventListener('load', () => {\r\n                context.drawImage(image, 0, 0);\r\n            });\r\n        })\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const mouseMoveHandler = (e, type) => {\r\n           console.log(e)\r\n            const event = type === 'touch' ? e.touches[0] : e;\r\n            findxy('move', event)\r\n        }\r\n        const mouseDownHandler = (e, type) => {\r\n             console.log(e.touches);\r\n            const event = type === 'touch' ? e.touches[0] : e;\r\n            findxy('down', event);\r\n        }\r\n        const mouseUpHandler = (e, type) => {\r\n            const event = type === 'touch' ? e.touches[0] : e;\r\n            findxy('up', event)\r\n        }\r\n\r\n        let prevX = 0, currX = 0, prevY = 0, currY = 0, flag = false;\r\n\r\n        const canvas = document.getElementById('canvas');\r\n        canvas.height = window.innerHeight;\r\n        canvas.width = window.innerWidth;\r\n        const context = canvas.getContext('2d');\r\n        const onSave = () => {\r\n            console.log(canvasDetails);\r\n            if (!canvasDetails.waiting) {\r\n                const base64EncodedUrl = canvas.toDataURL('image/png');\r\n                // addToImgData(base64EncodedUrl);\r\n                storeImgData.push(base64EncodedUrl);\r\n                storeImgData1.push(base64EncodedUrl);\r\n                canvasDetails.socket.emit('image-data', base64EncodedUrl);\r\n                canvasDetails.waiting = true;\r\n                setTimeout(() => {\r\n                    canvasDetails.waiting = false;\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        const draw = (e) => {\r\n\r\n            // START- DRAW\r\n            context.beginPath();\r\n            context.moveTo(prevX, prevY);\r\n            context.lineTo(currX, currY);\r\n            context.strokeStyle = canvasDetails.color;\r\n            context.lineCap = 'round';\r\n            context.lineJoin = 'round';\r\n            context.lineWidth = canvasDetails.lineWidth;\r\n            context.stroke();\r\n            context.closePath();\r\n            // END- DRAW\r\n\r\n            onSave();\r\n        }\r\n\r\n        const findxy = (res, e) => {\r\n            if (res === 'down') {\r\n                prevX = currX;\r\n                prevY = currY;\r\n                currX = e.clientX - canvas.offsetLeft;\r\n                currY = e.clientY - canvas.offsetTop;\r\n                flag = true;\r\n            }\r\n            if (res === 'up' || res === \"out\") {\r\n                flag = false;\r\n            }\r\n            if (res === 'move') {\r\n                if (flag) {\r\n                    prevX = currX;\r\n                    prevY = currY;\r\n                    currX = e.clientX - canvas.offsetLeft;\r\n                    currY = e.clientY - canvas.offsetTop;\r\n                    draw(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        canvas.addEventListener(\"mousemove\", mouseMoveHandler);\r\n        canvas.addEventListener(\"mousedown\", mouseDownHandler);\r\n        canvas.addEventListener(\"mouseup\", mouseUpHandler);\r\n        canvas.addEventListener(\"touchmove\", (e) => mouseMoveHandler(e, 'touch'), { passive: true });\r\n        canvas.addEventListener(\"touchstart\", (e) => mouseDownHandler(e, 'touch'), { passive: true });\r\n        canvas.addEventListener(\"touchend\", (e) => mouseUpHandler(e, 'touch'));\r\n      \r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className='blackboard'>\r\n                <figure className=\"frame\">\r\n                    <div className='color-picker-wrapper'>\r\n                        <div>\r\n                        <h3>Let's Collab</h3>\r\n                        </div>\r\n                        <div>\r\n                        <input\r\n                            className='color-picker'\r\n                            type='color'\r\n                            defaultValue='#EFEFEF'\r\n                            onChange={(e) => changeColor(e.target.value)}\r\n                        />\r\n                        <input\r\n                            min=\"2\"\r\n                            max=\"50\"\r\n                            type=\"range\"\r\n                            value={brushRadius}\r\n                            onChange={(event) => {\r\n                                changeBrushSize(parseInt(event.target.value));\r\n                            }}\r\n                        />\r\n                        <span>{brushRadius}</span>\r\n                        </div>\r\n                    </div>\r\n                    <canvas className='canvas' id='canvas'></canvas>\r\n                </figure>\r\n                <div className='button-wrapper'>\r\n                    <button className=\"btn\"\r\n                        onClick={(e) => {\r\n                            eraser()\r\n                        }}><BsEraserFill size={14} /></button>\r\n                    <button className=\"btn\"\r\n                        onClick={(e) => {\r\n                            pen()\r\n                        }}><BsFillPencilFill size={14} /></button>\r\n                    <button className=\"btn\"\r\n                        onClick={(e) => {\r\n                            clear()\r\n                        }}><AiOutlineClear size={14} /></button>\r\n                 \r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Canvas","import React from 'react';\r\nimport './App.css';\r\nimport Canvas1 from './Components/Canvas1.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Canvas1/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from \"react-dom/client\";\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <>\r\n    <App />\r\n  </>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}